   int num1=12;
   int num2=3;
   int num4=13;
   double d=(num1+num2+num3)/3; 
--------------------------------------------------------------------------------------------------------------------------------

Getting the output according to the testcases being written. 

------------------------------------------------------------------------------------------------------------------------------------
Structural validations =====> So dont change the structure of the class in the sense . Dont change the return 
type and the datatype of parameters.  
-----------------------------------------------------------------------------------------------------------------------------------
package com.infosys.inherit.revise1;
public class Parent {
  public int i;
}

package com.infosys.inherit.revise1;
public class Child extends Parent{
  public int j;
}


package com.infosys.inherit.revise1;
public class Main {
   public static void main(String args[]){
    Parent parent=new Parent();
    System.out.println(parent.i);  //0
    parent.i=100;
    System.out.println(parent.i); //100
    Child child=new Child();
    child.i=1000;
    child.j=2000;
    System.out.println(child.i);  //1000
    System.out.println(child.j);  //2000
   }
 }
---------------------------------------------------------------------------------------------------------------------------------

package com.infosys.inherit.revise2;
public class Parent {

 public int i;

public Parent(){  // parameterless constructor
   i=3000;
}
}

package com.infosys.inherit.revise2;
public class Child extends Parent{
  public int j;
}


package com.infosys.inherit.revise2;
public class Main {
   public static void main(String args[]){
    Parent parent=new Parent();
    System.out.println(parent.i);  //3000
    parent.i=100;
    System.out.println(parent.i); //100
    Child child=new Child();
    System.out.println(child.i); // 3000
    System.out.println(child.j); //0
    child.i=1000;
    child.j=2000;
    System.out.println(child.i);  //1000
    System.out.println(child.j);  //2000
   }
 }
------------------------------------------------------------------------------------------------------------------------------------  
package com.infosys.inherit.revise3;
public class Parent {

 public int i;


public Parent(int i){  // parameterized constructor
   this.i=i;
}
}

package com.infosys.inherit.revise3;
public class Child extends Parent{
  public int j;

  public Child(){
    j=20;
  }
}


package com.infosys.inherit.revise3;
public class Main {
   public static void main(String args[]){
   // Parent parent=new Parent(); // Comilation error as we dont have the paremeterless constructor so create a parameterless 
    // constructor in Parent
    Child child=new Child(); // compilation error as the parameterless constructor of the child class is looking for parameterless
   // constructor in the parent class. So to get rid of error , create a paremeterless constructor in the Parent class
   
   }
 } 
---------------------------------------------------------------------------------------------------------------------- 
package com.infosys.inherit.revise4;
public class Parent {

 public int i;


public Parent(int i){  // parameterized constructor
   this.i=i;
}
}

package com.infosys.inherit.revise4;
public class Child extends Parent{
  public int j;

  public Child(){
   super(100);
    j=20;
  }
}


package com.infosys.inherit.revise4;
public class Main {
   public static void main(String args[]){
    Child child=new Child(); // no error
   
   }
 }     
------------------------------------------------------------------------------------------------------------------------------    

package com.infosys.inherit.revise5;
public class Parent {

 public int i;

public Parent(){
i=20;
System.out.println("I am the parameterless constructor of Parent");
}
public Parent(int i){  // parameterized constructor
   this.i=i;
System.out.println("I am the parameterized constructor of Parent");

}
}

package com.infosys.inherit.revise5;
public class Child extends Parent{
  public int j;

  public Child(){
   super(100); // This should be the first line.
    j=20;
   System.out.println("I am the parameterless constructor of Child");
  }

  public Child(int j){
    System.out.println("I am the parameterized constructor of Child");
    this.j=j;
  }
}


package com.infosys.inherit.revise5;
public class Main {
   public static void main(String args[]){
    Child child=new Child();   
      // I am the parameterized constructor of Parent   
     //I am the parameterless constructor of Child
       // Will this call any constructor of parent class?
       // Yes the parameterised of parent;
    Child child2=new Child(5000);   // So will it call any constructor of Parent?
    // It will show I am parametrless constructor of parent  as it call the parent class parameterless constructor.
    //I am the parameterized constructor of Child is shown after that.
   }
 }   

--------------------------------------------------------------------------------------------------------------------------------------
So the default constructor of child calls the default constructor of parent by default.
The default constructor of child can call the parameterised constructor of Parent if called explicitly with super.
The parameterized constructor of child , by default calls the parameterless constructor of the Parent.
The parameterized constructor of child, can call parameterized constructor of parent with the explicit usage of super.
Calling the parent class constructor with super should be the first line otherwise it will show compilation error.
-----------------------------------------------------------------------------------------------------------------------------------
public class Base {
   protected int i=10;
}

public class Derived extends Base{
   private int i=100;

 public void display(){
   System.out.println(i); // It will access the i of the sublcass, to mention or differentiate the variables which are 
  // with the same name we can make use of super keyword. This will print 100.
  System.out.println(super.i);   // This will print 10. super is a keyword used to 
  // represent the immediate parent class.
  }
}
---------------------------------------------------------------------------------------------------------------------------------
class A {
protected int i=10;
}


class B extends A {
protected int i=100;
public void display(){
 System.out.println(super.i); //10
}
}

class C extends B{
private int i=1000;

public void display(){
 System.out.println(super.i);  //100
 System.out.println(super.super.i)// compilation error 
}

}

super always is used to represent the immediate parent class.

--------------------------------------------------------------------------------------------------------------------------------------
Method calls in Inheritence:--

In Object Oriented Programming we talk aboult polymorphism.

Poly =====> means many
morphic=====> body structure

Polymorphism in Object oriented programming can be achieved in two ways:
  * Method overriding =====> dynamic polymorphism
  * Method overloading=====> static polymorphism

Method overriding: -
* We need to have inheritence relationship between two classes Parent and Child.
* Method overriding cannot happen in a single class. 
* We will be having the method/methods in both parent and Child class with same name , same return type, same number of parameters
  and same datatype of the parameters.

 public class Calculator {

   public int calculate(int a,int b){   // The method in the parent class is overridden
    return a+b;
   }
}

 public class Calculator2 extends Calculator{

   public int calculate(int a,int b){  // This method in the sub-class is overriding a method in 
                          // the parent class
     return  a*b;
   }
}

public class Main{
    public static void main(String[] args){
      Calculator2 calc=new Calculator2();
      System.out.println(calc.calculate(2,3)); //6
     }
 }
------------------------------------------------------------------------------------------------------------------------------------

public class Parent{

public void display(){
   System.out.println("Display method");
}
}

public class Child{

public void display(){
   System.out.println("Display method");
}
}

[ The above scenario is not method overriding as the classes Parent and Child are not related with inheritence. ]
-----------------------------------------------------------------------------------------------------------------------------------
Why we should learn the concept of method overriding?

Suppose we have base class with some method implementation but that implementation is not futile or applicable or suitable for the 
sub-classes.



  public class Exam{
     private int registrationId;
     private String testName;

     public void test(){
      System.out.println("Pen and Paper exams");
     }
 }


 public class OnlineExam extends Exam {
   private String password;
   public void test(){
    System.out.println("Writing online exams");
   }
 }
 
  public class Main{
   public static void main(String args[]){
    OnlineExam exam=new OnlineExam();
    exam.test(); // So the method test() in the subclass will get priority and it will override the method test in the parent class
    // exam
   }
  }

------------------------------------------------------------------------------------------------------------------
As we can see the methods same so is there any way out to call the base class method?
Ans Yes. With the help of super keyword.

public class Exam{
     private int registrationId;
     private String testName;

     public void test(){
      System.out.println("Pen and Paper exams");
     }
 }


 public class OnlineExam extends Exam {
   public void test(){
    //test(); // recursive method call
    super.test(); // We are invoking the test method of the super/parent class
    System.out.println("Writing online exams");
     super.test(); // calling super.test() not in the first line is fine. It is mandatory in case of constructor call.
   }
 }
 
  public class Main{
   public static void main(String args[]){
    OnlineExam exam=new OnlineExam();
    exam.test(); // So the method test() in the subclass will get priority and it will override the method test in the parent class
    // exam but after entering the test method of the subclass it will get super.test() and hence it will call the test method of
    // the parent class and control will again come back to the test method of the child class
   }
  }


// Here also is it mandatory to use super in the firs line?
A: No. super with constructor call where we expect that calling the base class constructor with super should be the first line
   but using super with instance variable and method , we dont require the usage of super should be in the first line.

-------------------------------------------------------------------------------------------------------------
* Method overloading is in the single class. Method overloading can happen within Parent and subclass. 
* For method overloading , 
  ** method names should be same.
  ** different number of parameters.
  ** datatype of parameters.
  ** sequence of parameters.
[ Return type only is not a deciding factor for method overloading]

 public class Calculator{
 
   public int add(int a,int b){
    return a+b;
   }
 
 /* public void add(int a,int b){
   System.out.println(a+b);
  } */
 
  // Both the above methods can be kept in the single class because they differ only in the return type. But we 
  // dont consider only the return type for deciding method overloading
 public int add(int a,int b,int c){
    return a+b+c;
  }

  public float add(float a, float b){
    return a+b;
  }


  public void add(float a, float b, float c){
   System.out.println(a+b+c);
  }


 public float add(int a, float b){
    return a+b;
  }

 public float add(float a, int b){
    return a+b;
  }

 }


public class Main{
   public static void main(String args[]){
    Calculator calc=new Calculator();
    System.out.println(calc.add(3,4));
    System.out.println(calc.add(3.2f,4.5f));
    System.out.println(calc.add(1,2,3));
    calc.add(1.2f,1,1.3f);

  }
}
----------------------------------------------------------------


 public class Calculator1{
 
   public int add(int a,int b){
    return a+b;
   }

  public int add(int a,int b,int c){
    return a+b+c;
  }
}

public class Calculator2 extends Calculator1{

  public float add(float a, float b){
    return a+b;
  }

 public float add(int a, float b){
    return a+b;
  }

 public float add(float a, int b){
    return a+b;
  }

 }

The above is also an example of method overloading
---------------------------------------------------------------------------------------------------------


 public class Calculator1{
 
   public int add(int a,int b){
    return a+b;
   }

  public int add(int a,int b,int c){
    return a+b+c;
  }
}

public class Calculator2 {

  public float add(float a, float b){
    return a+b;
  }

 public float add(int a, float b){
    return a+b;
  }

 public float add(float a, int b){
    return a+b;
  }

 }

[ The above example is not of method overloading as the classes dont have any parent child kind of relationship.
--------------------------------------------------------------------------------------------------------------------------

We can write multiple constructors in a class which is an example
of overloading and specifically it is called as constructor 
overloading. 


public class Numbers {
  private int a;
  private int b;

  public Numbers(){
    a=100;
    b=200;
 }

 public Numbers(int a,int b){
   this.a=a;
   this.b=b;
  }
}


public class Main {
   public static void main(String args[]){
   Numbers number1=new Numbers();
   Numbers number2=new Numbers(1,2);
   //Numbers number3=new Numbers(1,2,3); 
   // We dont have any constructor with 3 parameters. So
   // we will get compilation error while creating the object
   // if we write a constructor call with 3 parameters  
}
}
-------------------------------------------------------------------------------------------------------------------
private====>default=====>protected======>public

So if the Parent class method is having access modifier as public then the child class method should be having access
modifier as public only.
if the Parent class method is having access modifier as protected then the child class method should be having access
modifier as either protected or public.

So the conclusion is the overriding method cannot have weaker(restricted) access modifier than
the ovrridden method. 

  public class Base {

   public void display(){}

  }

 public class Derived extends Base{
   void display(){}
 }

The above code is not valid.

  public class Base {

   void display(){}

  }

 public class Derived extends Base{
  public void display(){}
 }

[ So the above code is fine as you decreased the restriction of the modifier. ]


public class Base{
  private void display(){}
 }

public class Derived extends Base{
  public void public display(){}
 }

[ In the above case the display method in the child class is not overriding the display method in the Parent class as
the method is private in the Parent class and we dont override a private method. ]

When we override a method in the child class, it should have the same signature as that of the parent class.

The method should not have a weaker access modifier.

Private methods are not overridden.
--------------------------------------------------------------------------------------------------------
Type conversion and type casting of Reference type.
You have learn the type casting and conversion of primitive type.


   int num=10;
   double d=num;   // Type conversion

    double d=12.4;
    int num=(double)d;   // Type casting
  
-------------------------------------------------------------------------------------------------------------------------
public class Base {}
public class Derived extends Base {}


  Base base=new Derived(); // Type conversion in reference type.

  Derived derived=(Derived)base;  // Type casting in reference type.

So in type conversion and casting of reference type . the classes for conversion and casting should be related with Parent Child
relationship.


public class Base {}
public class Derived {}

  Base base=new Derived();  // So this is not possible because the class Base and Derived are not related with parent child 
   // relationship.

-----------------------------------------------------------------------------------------------------------------------------
Primitive type should be casted or converted to primitive only.
Similary reference type should be casted or converted to reference type only.
So in reference type whenever we are converting from Derived to Base , it is called type conversion.
public class Base{}
public class Derived extends Base {}
Base base=new Derived(); // type conversion

For typecasting in reference type , we convert from Base type to the derived type.
Derived derived=(Derived)base; // type casting in reference type.

Static methods are not overridden. They will be called based on the type of reference used.
---------------------------------------------------------------------------------------------------------------------







     